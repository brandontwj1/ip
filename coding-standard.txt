# CS2103T Java Coding Standard (Basic + Intermediate)

> Use the Google Java style guide for any topics not covered in this document.

**Legend:** ⭐ basic rule | ⭐⭐ intermediate rule | ⭐⭐⭐ advanced rule

## Naming

### ⭐ Package Names
Names representing packages should be in all lower case.

**For school projects:** The root name of the package should be your group name or project name followed by logical group names.

```java
// Good
todobuddy.ui
todobuddy.file
com.company.application.ui

// Bad - Do not use edu.nus.comp.* or similar
edu.nus.comp.cs2103t.todobuddy
```

**Rationale:** Your code is not officially 'produced by NUS', therefore do not use `edu.nus.comp.*` or anything similar.

### ⭐ Class and Enum Names
Class/enum names must be nouns and written in **PascalCase**.

```java
// Good
Line, AudioSystem, TodoItem, TaskManager
```

### ⭐ Variable Names
Variable names must be in **camelCase**.

```java
// Good
line, audioSystem, todoItem, taskManager
```

### ⭐ Constant Names
Constant names must be all uppercase using underscore to separate words (**SCREAMING_SNAKE_CASE**).

```java
// Good
MAX_ITERATIONS, COLOR_RED, DEFAULT_TIMEOUT
```

To find what exactly are considered constants, refer to the Google Java Style Guide.

### ⭐ Method Names
Names representing methods must be verbs and written in **camelCase**.

```java
// Good
getName(), computeTotalWidth(), processData()
```

**For test method names:** Underscores may be used in the following three-part format:
`featureUnderTest_testScenario_expectedBehavior()`

```java
// Examples
sortList_emptyList_exceptionThrown()
getMember_memberNotFound_nullReturned()
sortList_emptyList()  // Third part omitted
sortList()           // Both second and third parts omitted
```

### ⭐⭐ Abbreviations and Acronyms
Abbreviations and acronyms should not be uppercase when used as a part of a name.

```java
// Good
exportHtmlSource();
openDvdPlayer();

// Bad
exportHTMLSource();
openDVDPlayer();
```

### ⭐ English Language
All names should be written in English.

**Rationale:** The code is meant for an international audience.

### ⭐⭐ Scope-Based Naming
Variables with a large scope should have long names, variables with a small scope can have short names.

Scratch variables used for temporary storage or indices can be kept short. Common scratch variables:
- For integers: `i, j, k, m, n`
- For characters: `c, d`

**Rationale:** When the scope is small, the reader does not have to remember it for long.

### ⭐ Boolean Naming
Boolean variables/methods should be named to sound like booleans.

```java
// Variables
isSet, isVisible, isFinished, isFound, isOpen, hasData, wasOpen

// Methods
boolean hasLicense();
boolean canEvaluate();
boolean shouldAbort = false;
```

Use prefixes such as `is`, `has`, `was`, etc. for boolean variable/method names.

**Setter methods for boolean variables:**
```java
void setFound(boolean isFound);
```

**Rationale:** This makes the code read like normal English, e.g., `if(isOpen) ...`

### ⭐ Collection Names
Plural form should be used on names representing a collection of objects.

```java
// Good
Collection<Point> points;
int[] values;
```

**Rationale:** Enhances readability since the name gives the user an immediate clue of the type of the variable.

### ⭐ Iterator Variables
Iterator variables can be called `i, j, k` etc.

```java
for (Iterator i = points.iterator(); i.hasNext(); ) {
    // ...
}

for (int i = 0; i < nTables; i++) {
    // ...
}
```

Variables named `j, k` etc. should be used for nested loops only.

**Rationale:** The notation is taken from mathematics where it is an established convention.

### ⭐⭐ Associated Constants
Associated constants should have a common prefix.

```java
static final int COLOR_RED = 1;
static final int COLOR_GREEN = 2;
static final int COLOR_BLUE = 3;
```

**Rationale:** This indicates that they belong together and makes them appear together when sorted alphabetically.

## Layout

### ⭐ Indentation
Basic indentation should be **4 spaces** (not tabs).

```java
for (i = 0; i < nElements; i++) {
    a[i] = 0;
}
```

### ⭐ Line Length
Line length should be no longer than **120 characters**.

- **Soft limit:** 110 characters
- **Hard limit:** 120 characters

**Line wrapping:** Indentation for wrapped lines should be **8 spaces** (twice the normal indentation) more than the parent line.

### ⭐⭐ Line Breaking for Readability
When wrapping lines, the main objective is to improve readability.

**General rules:**
- Break after a comma
- Break before an operator
- Method or constructor name stays attached to the open parenthesis `(`

```java
// Good
setText("Long line split"
        + "into two parts.");

totalSum = a + b + c
        + d + e;

method(param1,
        object.method()
                .method2(),
        param3);

// Prefer higher-level breaks
longName1 = longName2 * (longName3 + longName4 - longName5)
        + 4 * longname6;

// Ternary expressions
alpha = (aLongBooleanExpression) ? beta : gamma;
// OR
alpha = (aLongBooleanExpression)
        ? beta
        : gamma;
```

### ⭐ K&R Style Brackets
Use **K&R style brackets** (aka Egyptian style).

```java
// Good
while (!done) {
    doSomething();
    done = moreToDo();
}

// Bad
while (!done)
{
    doSomething();
    done = moreToDo();
}
```

### ⭐ Method Definitions
```java
public void someMethod() throws SomeException {
    // ...
}
```

### ⭐ If-Else Statements
```java
if (condition) {
    statements;
}

if (condition) {
    statements;
} else {
    statements;
}

if (condition) {
    statements;
} else if (condition) {
    statements;
} else {
    statements;
}
```

### ⭐ For Statements
```java
for (initialization; condition; update) {
    statements;
}
```

### ⭐ While and Do-While Statements
```java
while (condition) {
    statements;
}

do {
    statements;
} while (condition);
```

### ⭐ Switch Statements
Note: No indentation for `case` clauses.

```java
switch (condition) {
case ABC:
    statements;
    // Fallthrough
case DEF:
    statements;
    break;
case XYZ:
    statements;
    break;
default:
    statements;
    break;
}
```

**Lambda-style switch statements/expressions:**
```java
switch (condition) {
case ABC -> method("1");
case DEF -> method("2");
case XYZ -> method("3");
default -> method("0");
}

int size = switch (condition) {
case ABC -> 1;
case DEF -> 2;
case XYZ -> 3;
default -> 0;
}
```

**Fallthrough comment:** The explicit `// Fallthrough` comment should be included whenever there is a case statement without a break statement.

### ⭐ Try-Catch Statements
```java
try {
    statements;
} catch (Exception exception) {
    statements;
}

try {
    statements;
} catch (Exception exception) {
    statements;
} finally {
    statements;
}
```

### ⭐⭐ White Space Within Statements

| Rule | Good | Bad |
|------|------|-----|
| Operators should be surrounded by a space | `a = (b + c) * d;` | `a=(b+c)*d;` |
| Java reserved words should be followed by a white space | `while (true) {` | `while(true){` |
| Commas should be followed by a white space | `doSomething(a, b, c, d);` | `doSomething(a,b,c,d);` |
| Semicolons in for statements should be followed by a space | `for (i = 0; i < 10; i++) {` | `for(i=0;i<10;i++){` |

**Rationale:** Makes the individual components of the statements stand out and enhances readability.

### ⭐⭐ Logical Units Separation
Logical units within a block should be separated by one blank line.

```java
// Create a new identity matrix
Matrix4x4 matrix = new Matrix4x4();

// Precompute angles for efficiency
double cosAngle = Math.cos(angle);
double sinAngle = Math.sin(angle);

// Specify matrix as a rotation transformation
matrix.setElement(1, 1, cosAngle);
matrix.setElement(1, 2, sinAngle);
```

## Statements

### Package and Import Statements

### ⭐ Package Declaration
Put every class in a package.

**Rationale:** It will help you and other developers easily understand the code base when all classes have been grouped in packages.

### ⭐⭐ Import Ordering
The ordering of import statements must be consistent.

```java
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.io.File;
import java.io.IOException;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;

import org.loadui.testfx.GuiTest;
import org.testfx.api.FxToolkit;

import com.google.common.io.Files;

import javafx.geometry.Bounds;
import javafx.geometry.Point2D;

import junit.framework.AssertionFailedError;
```

### ⭐ Explicit Imports
Imported classes should always be listed explicitly.

```java
// Good
import java.util.List;
import java.util.ArrayList;
import java.util.HashSet;

// Bad
import java.util.*;
```

**Rationale:** Importing classes explicitly gives excellent documentation value and makes the class easier to comprehend and maintain.

## Types

### ⭐ Array Specifiers
Array specifiers must be attached to the type, not the variable.

```java
// Good
int[] a = new int[20];

// Bad
int a[] = new int[20];
```

**Rationale:** The arrayness is a feature of the base type, not the variable.

## Variables

### ⭐⭐ Variable Initialization and Scope
Variables should be initialized where they are declared and should be declared in the smallest scope possible.

```java
// Good
int sum = 0;
for (int i = 0; i < 10; i++) {
    for (int j = 0; j < 10; j++) {
        sum += i * j;
    }
}

// Bad
int i, j, sum;
sum = 0;
for (i = 0; i < 10; i++) {
    for (j = 0; j < 10; j++) {
        sum += i * j;
    }
}
```

**Rationale:** This ensures that variables are valid at any time.

### ⭐⭐ Class Variables Visibility
Class variables should never be declared public unless the class is a data class with no behavior. This rule does not apply to constants.

```java
// Bad
public class Foo {
    public int bar;
}
```

**Rationale:** The concept of Java information hiding and encapsulation is violated by public variables.

## Loops

### ⭐ Loop Body Brackets
The loop body should be wrapped by curly brackets irrespective of how many lines there are in the body.

```java
// Good
for (i = 0; i < 100; i++) {
    sum += value[i];
}

// Bad
for (i = 0, sum = 0; i < 100; i++)
    sum += value[i];
```

**Rationale:** Error-prone when there is only one statement without braces.

## Conditionals

### ⭐ Conditional Placement
The conditional should be put on a separate line.

```java
// Good
if (isDone) {
    doCleanup();
}

// Bad
if (isDone) doCleanup();
```

**Rationale:** This helps when debugging using an IDE debugger.

### ⭐ Single Statement Conditionals
Single statement conditionals should still be wrapped by curly brackets.

```java
// Good
InputStream stream = File.open(fileName, "w");
if (stream != null) {
    readFile(stream);
}

// Bad
InputStream stream = File.open(fileName, "w");
if (stream != null)
    readFile(stream);
```

**Rationale:** Omitting braces can lead to subtle bugs.

## Comments

### ⭐ Language
All comments should be written in English.

- Choose either American or British spelling and use it consistently
- Avoid local slang

**Rationale:** The code is meant for an international audience.

### ⭐⭐ Header Comments
Write descriptive header comments for all public classes/methods.

**Required for:** All classes, public methods

**Can be omitted for:**
1. Getters/setters
2. When overriding methods (provided the parent method's Javadoc applies exactly)

**Rationale:** Public methods are meant to be used by others and users should not be forced to read the code to understand behavior.

### ⭐ Javadoc Format
```java
/**
 * Returns lateral location of the specified position.
 * If the position is unset, NaN is returned.
 *
 * @param x X coordinate of position.
 * @param y Y coordinate of position.
 * @param zone Zone of position.
 * @return Lateral location.
 * @throws IllegalArgumentException If zone is <= 0.
 */
public double computeLocation(double x, double y, int zone)
        throws IllegalArgumentException {
    // ...
}
```

**Key points:**
- Opening `/**` on a separate line
- First sentence as short summary
- Start with "Returns...", "Sends...", "Adds..." (not "Return" or "Returning")
- Subsequent `*` aligned with the first
- Space after each `*`
- Empty line between description and parameter section
- Punctuation behind each parameter description
- No blank line between documentation block and method/class

**Single-line Javadoc for class members:**
```java
/** Number of connections to this database */
private int connectionCount;
```

### ⭐ Comment Indentation
Comments should be indented relative to their position in the code.

```java
// Good
while (true) {
    // Do something
    something();
}

// Trailing comments are allowed
process('ABC'); // process a dummy String first
```

**Rationale:** This avoids comments from breaking the logical structure of the program.

## References

1. [Oracle's Java Style Guide](https://www.oracle.com/docs/tech/java/codeconventions.pdf)
2. [Google's Java Style Guide](https://google.github.io/styleguide/javaguide.html)

## Contributors

- Nimantha Baranasuriya - Initial draft
- Dai Thanh - Further tweaks
- Tong Chun Kit - Further tweaks
- Barnabas Tan - Converted from Google Docs to Markdown Document